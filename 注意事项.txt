1、索引从1开始，而不是0。

2、函数可变参数使用 ... 
function average(...)
    result = 0
    local arg = {...} --> arg 为一个表，局部变量,将传入的表保存
    for i, v in ipairs(arg) do
        result = result + v
    end
    print("总共传入 " .. #arg .. " 个数")
    return result / #arg
end

print("平均值为", average(10, 5, 3, 4, 5, 6))


3、查看变量长度使用#

4、一般使用{}传入表

5、nil和false为0， 数字0不为0

6、遍历列表使用select
select('#', …) 返回可变参数的长度。
select(n, …) 用于返回从起点 n 开始到结束位置的所有参数列表。

7、不等于用~=
nil~=true

and or not

符号优先级，从高到低
^
not    - (unary)
*      /       %
+      -
..
<      >      <=     >=     ~=     ==
and
or

除了^ 和 .. 的所有运算符都是左连接
a+i < b/2+1          <-->       (a+i) < ((b/2)+1)
5+x^2*8              <-->       5+((x^2)*8)
a < y and y <= z     <-->       (a < y) and (y <= z)
-x^2                 <-->       -(x^2)
x^y^z                <-->       x^(y^z)

8、迭代器无状态调用
function square(max, start)
    if start < max then
        start = start + 1
        return start, start * start
    end
end

-- 注意函数的调用方式
for i, n in square, 3, 0 do
    print(i, n)
end

9、string.byte(i,j)
返回对应下标的ASCII码

10、符号优先级，赋值从右到左，and和or优先级最低
-- host = (p == "ws" and 80 or 443)
-- 若p=="ws",则为true, true and 80 为80，否则false and 80 为false
-- false or 443 为443, 80 or 443 为80

p = "tls"
host = p == "ws" and 80 or 443
print(host)

tp = "ws"
host = tp == "ws" and 80 or 443
print(host)

print(tp == "ws")
print(tp == "ws" and 80)
print(true and 80)
print(false and 80)
print(false or 80)
print(80 or 443)

11、加载动态链接库.so 
先用c文件编写对应函数的代码，然后编译生成.so文件生成动态链接库，
其中_cb,_release等函数必不可少。
struct skynet_context { 
	void * instance;             //*隔离的环境
	struct skynet_module * mod;
	void * cb_ud;                //回调携带的环境 
	skynet_cb cb;                //*回调函数
	struct message_queue *queue; //*消息队列
}

12、框架中的 api 参数中，name 常为函数名，...为name函数待传入的参数

13、function的常用方法
（1）function skynet.start(...)

     end

（2）skynet.start = function(...)
	
     end

（3）skynet["start"] = function(...)